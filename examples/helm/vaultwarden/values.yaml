---
host: bitwarden.local
global:
  annotations:
    example.com/global-annotation: "true"
  labels:
    example.com/global-label: "true"

serviceAccount:
  bitwarden:
    enabled: true
    staticToken: false
  test:
    enabled: true

controllers:
  main:
    type: statefulset
    replicas: 3
    serviceAccount:
      identifier: test
    containers:
      main:
        enabled: true
        image:
          repository: vaultwarden/server
          tag: 1.34.3-alpine@sha256:d70118b9dafb8588ee2651ceb5df68db27dcbd8e18467722010644ba48d5d6d6
        env:
          DOMAIN: https://{{ .Values.host}}
        envFrom:
          # Get secret from external-secret for hashicorp vault provider
          - secretRef:
              name: '{{ .Release.Name }}-secret'
        probes:
          liveness:
            enabled: true
            type: HTTP
            path: /alive
          readiness:
            enabled: true
            type: HTTP
            path: /alive
          startup:
            enabled: true
            path: /alive
        resources:
          limits:
            cpu: 1
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 128Mi
  second:
    enabled: true
    type: statefulset
    replicas: 3
    serviceAccount:
      identifier: test
    containers:
      main:
        enabled: true
        image:
          repository: vaultwarden/server
          tag: 1.34.3-alpine@sha256:d70118b9dafb8588ee2651ceb5df68db27dcbd8e18467722010644ba48d5d6d6

podDisruptionBudget:
  enabled: true
  controller: main
  maxUnavailable: 1
  annotations:
    example.com/custom-annotation: "true"

externalSecret:
  secret:
    enabled: true
    secretStoreRef:
      name: vault-secret-store
      kind: SecretStore
    refreshInterval: 1h
    target:
      name: '{{ .Release.Name }}-secret'
    data:
      - secretKey: ADMIN_TOKEN
        remoteRef:
          key: secret/data/kubernetes/vaultwarden
          property: data.ADMIN_TOKEN
      - secretKey: POSTGRES_PASSWORD
        remoteRef:
          key: secret/data/database/credentials
          property: data.password
  aws:
    enabled: true
    secretStoreRef:
      name: vault-secret-store
      kind: SecretStore
    refreshInterval: 1h
    target:
      name: '{{ .Release.Name }}-secret'
    dataFrom:
      - extract:
          key: secret/data/kubernetes/{{ .Release.Name }}
          property: data

infisicalSecret:
  secret:
    enabled: true
    authentication:
      kubernetesAuth:
        identityId: id
        autoCreateServiceAccountToken: true
        serviceAccountRef:
          name: "{{ .Release.Name }}"
          namespace: "{{ .Release.Namespace }}"
        secretsScope:
          projectSlug: kubernetes
          envSlug: prod
          secretsPath: "/{{ .Release.Name }}"
          recursive: true

service:
  main:
    enabled: true
    type: ClusterIP
    ports:
      http:
        enabled: true
        port: 80
        targetPort: 80

ingress:
  cloudflare:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "route"
      nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    hosts:
      - host: "{{ .Values.host }}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - "{{ .Values.host }}"
